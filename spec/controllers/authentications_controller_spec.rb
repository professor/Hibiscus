require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe AuthenticationsController do

  def mock_authentication(stubs = {})
    @mock_authentication ||= mock_model(Authentication, stubs).as_null_object
  end
  
  context "Unauthenticated user: " do
    it "should not allow access to get the index page" do
      get :index
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
    
    describe "POST create" do    
      before(:each) do
        @authentication = FactoryGirl.create(:authentication)
        @user = @authentication.user
        request.env['omniauth.auth'] = "Stubbed."
        Authentication.should_receive(:where).and_return(@authentication)
      end
      
      context "Existing user" do
        before(:each) do
          @authentication.should_receive(:first).and_return(@authentication)
          post :create
        end
        
        it "should sign the user in and redirect to the posts page." do
          flash[:notice].should == "You are now signed in."
          response.should redirect_to(root_path)
        end
      end
    
      context "New user" do
        before(:each) do
          @authentication.should_receive(:first).and_return(nil)
          # post :create
          # User.should_receive(:create).and_return(@user)
        end
        
        it "should create a new user"
        
        it "should build an authentication for that user"
        
        it "should sign the user in and redirect to the posts page on success"
        
        it "should display an error flash and redirect to the posts page on failure"
      end
    end
  end

  context "Authenticated user: " do
    describe "GET index" do
      before(:each) do    
        login
      end
    
      it "should assign the current user's authentications as @authentications" do
        controller.current_user.should_receive(:authentications).and_return(mock_authentication)
        get :index
        assigns(:authentications).should eq(mock_authentication)
      end
    end
  end
end
