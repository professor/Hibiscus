require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe UsersController do

  def mock_user(stubs = {})
    @mock_user ||= mock_model(User, stubs).as_null_object
  end

  context "Unauthenticated user: " do
    it "should not allow access to show a user" do
      get :show, :id => mock_user.id
      flash[:alert].should == "You need to sign in before continuing."
      response.should redirect_to("/users/sign_in")
    end
  end

  context "Authenticated user: " do
    before(:each) do
      login
    end

    describe 'GET show' do
      # FIXME: NEED TO WRITE THIS.
      it "should set the user's info" do
        get :show, :id => @user.slug
        assigns(:user).should == @user
        response.should be_success
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested users email" do
          User.stub(:find) { mock_user }
          mock_user.should_receive(:save)
          put :update, :id => "10", :user => {'email' => 'test@test.com' }
          response.should redirect_to(user_url(mock_user))
        end

        it "updates the requested users gravatar email" do
          User.stub(:find) { mock_user }
          mock_user.should_receive(:save)
          put :update, :id => "10", :user => {'gravatar_email' => 'test@test.com' }
          response.should redirect_to(user_url(mock_user))
        end

        it "updates the requested users digest frequency" do
          User.stub(:find) { mock_user }
          mock_user.should_receive(:save)
          put :update, :id => "10", :user => {'digest_frequency' => 'Weekly' }
          response.should redirect_to(user_url(mock_user))
        end

        it "redirects to the user" do
          User.stub(:find) { mock_user }
          put :update, :id => "1", :user => {}
          response.should redirect_to(user_url(mock_user))
        end

      end
    end

  end

  context 'Authenticated admin' do
    before(:each) do
      login_admin
    end

    describe "GET index" do
      it "should list all the users" do
        User.stub_chain(:all, :asc) { [mock_user] }
        get :index
        assigns(:users).should eq([mock_user])
        response.should be_success
      end
    end

    describe "DELETE destroy" do
       it "destroys the requested user" do
         User.stub(:find_by_slug).with("1") {mock_user}
         mock_user.should_receive(:delete).and_return(true)
         delete :destroy, :id => "1"
         response.should redirect_to (users_path)
       end
    end

    describe "GET restore" do
      it "unblocks the user" do
        User.stub_chain(:deleted, :where) {[mock_user]}
        mock_user.should_receive(:restore).and_return(true)
        get :restore, :id => "1"
        response.should redirect_to (users_path)
      end
    end


    describe "GET obliterate" do
      it "destroys the user permanently" do
        User.stub_chain(:deleted, :where) {[mock_user]}
        mock_user.should_receive(:destroy!).and_return(true)
        get :obliterate, :id => "1"
        response.should redirect_to (users_path)
      end
    end
  end

end

